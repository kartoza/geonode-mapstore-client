(window.webpackJsonp=window.webpackJsonp||[]).push([["vendors~map-library-cesium-js~map-library-leaflet-js~map-library-openlayers-js~plugins/geostory-plug~5a52f4ec"],{"./MapStore2/node_modules/@turf/bbox-polygon/main.es.js":function(e,t,r){"use strict";var n=r("./MapStore2/node_modules/@turf/helpers/main.es.js");t.a=function(e){Object(n.validateBBox)(e);var t=Number(e[0]),r=Number(e[1]),o=Number(e[2]),i=Number(e[3]);if(6===e.length)throw new Error("@turf/bbox-polygon does not support BBox with 6 positions");var a=[t,r],s=[t,i],u=[o,i],c=[o,r];return Object(n.polygon)([[a,c,u,s,a]])}},"./MapStore2/node_modules/@turf/bbox/index.js":function(e,t,r){var n=r("./MapStore2/node_modules/@turf/meta/main.es.js").coordEach;e.exports=function(e){var t=[1/0,1/0,-1/0,-1/0];return n(e,(function(e){t[0]>e[0]&&(t[0]=e[0]),t[1]>e[1]&&(t[1]=e[1]),t[2]<e[0]&&(t[2]=e[0]),t[3]<e[1]&&(t[3]=e[1])})),t}},"./MapStore2/node_modules/@turf/boolean-contains/main.es.js":function(e,t,r){"use strict";var n=r("./MapStore2/node_modules/@turf/invariant/main.es.js");function o(e,t,r){var n=!1;t[0][0]===t[t.length-1][0]&&t[0][1]===t[t.length-1][1]&&(t=t.slice(0,t.length-1));for(var o=0,i=t.length-1;o<t.length;i=o++){var a=t[o][0],s=t[o][1],u=t[i][0],c=t[i][1];if(e[1]*(a-u)+s*(u-e[0])+c*(e[0]-a)==0&&(a-e[0])*(u-e[0])<=0&&(s-e[1])*(c-e[1])<=0)return!r;s>e[1]!=c>e[1]&&e[0]<(u-a)*(e[1]-s)/(c-s)+a&&(n=!n)}return n}var i=function(e,t,r){if("object"!=typeof(r=r||{}))throw new Error("options is invalid");var i=r.ignoreBoundary;if(!e)throw new Error("point is required");if(!t)throw new Error("polygon is required");var a=Object(n.getCoord)(e),s=Object(n.getCoords)(t),u=t.geometry?t.geometry.type:t.type,c=t.bbox;if(c&&!1===function(e,t){return t[0]<=e[0]&&t[1]<=e[1]&&t[2]>=e[0]&&t[3]>=e[1]}(a,c))return!1;"Polygon"===u&&(s=[s]);for(var h=0,f=!1;h<s.length&&!f;h++)if(o(a,s[h][0],i)){for(var d=!1,l=1;l<s[h].length&&!d;)o(a,s[h][l],!i)&&(d=!0),l++;d||(f=!0)}return f},a=r("./MapStore2/node_modules/@turf/bbox/index.js"),s=r.n(a),u=r("./MapStore2/node_modules/@turf/boolean-point-on-line/main.es.js");function c(e,t){return!(e[0]>t[0])&&(!(e[2]<t[2])&&(!(e[1]>t[1])&&!(e[3]<t[3])))}function h(e,t){return e[0]===t[0]&&e[1]===t[1]}t.a=function(e,t){var r=Object(n.getType)(e),o=Object(n.getType)(t),a=Object(n.getGeom)(e),f=Object(n.getGeom)(t),d=Object(n.getCoords)(e),l=Object(n.getCoords)(t);switch(r){case"Point":switch(o){case"Point":return h(d,l);default:throw new Error("feature2 "+o+" geometry not supported")}case"MultiPoint":switch(o){case"Point":return function(e,t){var r,n=!1;for(r=0;r<e.coordinates.length;r++)if(h(e.coordinates[r],t.coordinates)){n=!0;break}return n}(a,f);case"MultiPoint":return function(e,t){for(var r=0;r<t.coordinates.length;r++){for(var n=!1,o=0;o<e.coordinates.length;o++)if(h(t.coordinates[r],e.coordinates[o])){n=!0;break}if(!n)return!1}return!0}(a,f);default:throw new Error("feature2 "+o+" geometry not supported")}case"LineString":switch(o){case"Point":return Object(u.a)(f,a,{ignoreEndVertices:!0});case"LineString":return function(e,t){for(var r=!1,n=0;n<t.coordinates.length;n++)if(Object(u.a)({type:"Point",coordinates:t.coordinates[n]},e,{ignoreEndVertices:!0})&&(r=!0),!Object(u.a)({type:"Point",coordinates:t.coordinates[n]},e,{ignoreEndVertices:!1}))return!1;return r}(a,f);case"MultiPoint":return function(e,t){for(var r=!1,n=0;n<t.coordinates.length;n++)if(Object(u.a)(t.coordinates[n],e,{ignoreEndVertices:!0})&&(r=!0),!Object(u.a)(t.coordinates[n],e))return!1;if(r)return!0;return!1}(a,f);default:throw new Error("feature2 "+o+" geometry not supported")}case"Polygon":switch(o){case"Point":return i(f,a,{ignoreBoundary:!0});case"LineString":return function(e,t){var r=!1,n=0,o=s()(e),a=s()(t);if(!c(o,a))return!1;for(;n<t.coordinates.length-1;n++){var u=(h=t.coordinates[n],f=t.coordinates[n+1],[(h[0]+f[0])/2,(h[1]+f[1])/2]);if(i({type:"Point",coordinates:u},e,{ignoreBoundary:!0})){r=!0;break}}var h,f;return r}(a,f);case"Polygon":return function(e,t){var r=s()(e),n=s()(t);if(!c(r,n))return!1;for(var o=0;o<t.coordinates[0].length;o++)if(!i(t.coordinates[0][o],e))return!1;return!0}(a,f);case"MultiPoint":return function(e,t){for(var r=0;r<t.coordinates.length;r++)if(!i(t.coordinates[r],e,{ignoreBoundary:!0}))return!1;return!0}(a,f);default:throw new Error("feature2 "+o+" geometry not supported")}default:throw new Error("feature1 "+r+" geometry not supported")}}},"./MapStore2/node_modules/@turf/boolean-overlap/main.es.js":function(e,t,r){"use strict";var n=r("./MapStore2/node_modules/@turf/meta/main.es.js"),o=r("./MapStore2/node_modules/@turf/invariant/main.es.js"),i=r("./MapStore2/node_modules/geojson-rbush/index.js"),a=r("./MapStore2/node_modules/@turf/line-segment/main.es.js"),s=r("./MapStore2/node_modules/@turf/helpers/main.es.js");function u(e,t,r){if(r=r||{},!Object(s.isObject)(r))throw new Error("options is invalid");if(!0===r.final)return function(e,t){var r=u(t,e);return r=(r+180)%360}(e,t);var n=Object(o.getCoord)(e),i=Object(o.getCoord)(t),a=Object(s.degreesToRadians)(n[0]),c=Object(s.degreesToRadians)(i[0]),h=Object(s.degreesToRadians)(n[1]),f=Object(s.degreesToRadians)(i[1]),d=Math.sin(c-a)*Math.cos(f),l=Math.cos(h)*Math.sin(f)-Math.sin(h)*Math.cos(f)*Math.cos(c-a);return Object(s.radiansToDegrees)(Math.atan2(d,l))}var c=u,h=r("./MapStore2/node_modules/@turf/distance/main.es.js"),f=r("./MapStore2/node_modules/@turf/destination/main.es.js"),d=r("./MapStore2/node_modules/@turf/line-intersect/index.js"),l=r.n(d);var p=function(e,t,r){if(r=r||{},!Object(s.isObject)(r))throw new Error("options is invalid");var i=e.geometry?e.geometry.type:e.type;if("LineString"!==i&&"MultiLineString"!==i)throw new Error("lines must be LineString or MultiLineString");var a=Object(s.point)([1/0,1/0],{dist:1/0}),u=0;return Object(n.flattenEach)(e,(function(e){for(var n=Object(o.getCoords)(e),i=0;i<n.length-1;i++){var d=Object(s.point)(n[i]);d.properties.dist=Object(h.default)(t,d,r);var p=Object(s.point)(n[i+1]);p.properties.dist=Object(h.default)(t,p,r);var m=Object(h.default)(d,p,r),g=Math.max(d.properties.dist,p.properties.dist),y=c(d,p),b=Object(f.default)(t,g,y+90,r),w=Object(f.default)(t,g,y-90,r),v=l()(Object(s.lineString)([b.geometry.coordinates,w.geometry.coordinates]),Object(s.lineString)([d.geometry.coordinates,p.geometry.coordinates])),M=null;v.features.length>0&&((M=v.features[0]).properties.dist=Object(h.default)(t,M,r),M.properties.location=u+Object(h.default)(d,M,r)),d.properties.dist<a.properties.dist&&((a=d).properties.index=i,a.properties.location=u),p.properties.dist<a.properties.dist&&((a=p).properties.index=i+1,a.properties.location=u+m),M&&M.properties.dist<a.properties.dist&&((a=M).properties.index=i),u+=m}})),a},m=r("./MapStore2/node_modules/@turf/boolean-point-on-line/main.es.js"),g=Array.prototype.slice;function y(e){return"[object Arguments]"===Object.prototype.toString.call(e)}function b(e,t,r){return r||(r={}),e===t||(e instanceof Date&&t instanceof Date?e.getTime()===t.getTime():!e||!t||"object"!=typeof e&&"object"!=typeof t?(r.strict,e===t):function(e,t,r){var n,o;if(w(e)||w(t))return!1;if(e.prototype!==t.prototype)return!1;if(y(e))return!!y(t)&&(e=g.call(e),t=g.call(t),b(e,t,r));if(v(e)){if(!v(t))return!1;if(e.length!==t.length)return!1;for(n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}try{var i=Object.keys(e),a=Object.keys(t)}catch(e){return!1}if(i.length!==a.length)return!1;for(i.sort(),a.sort(),n=i.length-1;n>=0;n--)if(i[n]!==a[n])return!1;for(n=i.length-1;n>=0;n--)if(o=i[n],!b(e[o],t[o],r))return!1;return typeof e==typeof t}(e,t,r))}function w(e){return null==e}function v(e){return!(!e||"object"!=typeof e||"number"!=typeof e.length)&&("function"==typeof e.copy&&"function"==typeof e.slice&&!(e.length>0&&"number"!=typeof e[0]))}function M(e,t){var r=Object(o.getCoords)(t),n=Object(o.getCoords)(e),i=n[0],a=n[n.length-1],s=e.geometry.coordinates;return b(r[0],i)?s.unshift(r[1]):b(r[0],a)?s.push(r[1]):b(r[1],i)?s.unshift(r[0]):b(r[1],a)&&s.push(r[0]),e}var j=function(e,t,r){if(r=r||{},!Object(s.isObject)(r))throw new Error("options is invalid");var u,c=r.tolerance||0,h=[],f=Object(i.default)();return f.load(Object(a.default)(e)),Object(n.segmentEach)(t,(function(e){var t=!1;Object(n.featureEach)(f.search(e),(function(r){if(!1===t){var n=Object(o.getCoords)(e).sort(),i=Object(o.getCoords)(r).sort();b(n,i)||(0===c?Object(m.a)(n[0],r)&&Object(m.a)(n[1],r):p(r,n[0]).properties.dist<=c&&p(r,n[1]).properties.dist<=c)?(t=!0,u=u?M(u,e):e):(0===c?Object(m.a)(i[0],e)&&Object(m.a)(i[1],e):p(e,i[0]).properties.dist<=c&&p(e,i[1]).properties.dist<=c)&&(u=u?M(u,r):r)}})),!1===t&&u&&(h.push(u),u=void 0)})),u&&h.push(u),Object(s.featureCollection)(h)},x=r("./MapStore2/node_modules/geojson-equality/index.js"),E=r.n(x);t.a=function(e,t){if(!e)throw new Error("feature1 is required");if(!t)throw new Error("feature2 is required");var r=Object(o.getType)(e);if(r!==Object(o.getType)(t))throw new Error("features must be of the same type");if("Point"===r)throw new Error("Point geometry not supported");if(new E.a({precision:6}).compare(e,t))return!1;var i=0;switch(r){case"MultiPoint":var a=Object(n.coordAll)(e),s=Object(n.coordAll)(t);a.forEach((function(e){s.forEach((function(t){e[0]===t[0]&&e[1]===t[1]&&i++}))}));break;case"LineString":case"MultiLineString":Object(n.segmentEach)(e,(function(e){Object(n.segmentEach)(t,(function(t){j(e,t).features.length&&i++}))}));break;case"Polygon":case"MultiPolygon":Object(n.segmentEach)(e,(function(e){Object(n.segmentEach)(t,(function(t){l()(e,t).features.length&&i++}))}))}return i>0}},"./MapStore2/node_modules/@turf/boolean-point-on-line/main.es.js":function(e,t,r){"use strict";var n=r("./MapStore2/node_modules/@turf/invariant/main.es.js"),o=r("./MapStore2/node_modules/@turf/helpers/main.es.js");function i(e,t,r,n){var o=r[0],i=r[1],a=e[0],s=e[1],u=t[0],c=t[1],h=u-a,f=c-s;return 0==(r[0]-a)*f-(r[1]-s)*h&&(n?"start"===n?Math.abs(h)>=Math.abs(f)?h>0?a<o&&o<=u:u<=o&&o<a:f>0?s<i&&i<=c:c<=i&&i<s:"end"===n?Math.abs(h)>=Math.abs(f)?h>0?a<=o&&o<u:u<o&&o<=a:f>0?s<=i&&i<c:c<i&&i<=s:"both"===n?Math.abs(h)>=Math.abs(f)?h>0?a<o&&o<u:u<o&&o<a:f>0?s<i&&i<c:c<i&&i<s:void 0:Math.abs(h)>=Math.abs(f)?h>0?a<=o&&o<=u:u<=o&&o<=a:f>0?s<=i&&i<=c:c<=i&&i<=s)}t.a=function(e,t,r){var a=(r=r||{}).ignoreEndVertices;if(!Object(o.isObject)(r))throw new Error("invalid options");if(!e)throw new Error("pt is required");if(!t)throw new Error("line is required");for(var s=Object(n.getCoord)(e),u=Object(n.getCoords)(t),c=0;c<u.length-1;c++){var h=!1;if(a&&(0===c&&(h="start"),c===u.length-2&&(h="end"),0===c&&c+1===u.length-1&&(h="both")),i(u[c],u[c+1],s,h))return!0}return!1}},"./MapStore2/node_modules/@turf/destination/main.es.js":function(e,t,r){"use strict";r.r(t);var n=r("./MapStore2/node_modules/@turf/invariant/main.es.js"),o=r("./MapStore2/node_modules/@turf/helpers/main.es.js");t.default=function(e,t,r,i){if(i=i||{},!Object(o.isObject)(i))throw new Error("options is invalid");var a=i.units,s=i.properties,u=Object(n.getCoord)(e),c=Object(o.degreesToRadians)(u[0]),h=Object(o.degreesToRadians)(u[1]),f=Object(o.degreesToRadians)(r),d=Object(o.lengthToRadians)(t,a),l=Math.asin(Math.sin(h)*Math.cos(d)+Math.cos(h)*Math.sin(d)*Math.cos(f)),p=c+Math.atan2(Math.sin(f)*Math.sin(d)*Math.cos(h),Math.cos(d)-Math.sin(h)*Math.sin(l)),m=Object(o.radiansToDegrees)(p),g=Object(o.radiansToDegrees)(l);return Object(o.point)([m,g],s)}},"./MapStore2/node_modules/@turf/distance/main.es.js":function(e,t,r){"use strict";r.r(t);var n=r("./MapStore2/node_modules/@turf/invariant/main.es.js"),o=r("./MapStore2/node_modules/@turf/helpers/main.es.js");t.default=function(e,t,r){if(r=r||{},!Object(o.isObject)(r))throw new Error("options is invalid");var i=r.units,a=Object(n.getCoord)(e),s=Object(n.getCoord)(t),u=Object(o.degreesToRadians)(s[1]-a[1]),c=Object(o.degreesToRadians)(s[0]-a[0]),h=Object(o.degreesToRadians)(a[1]),f=Object(o.degreesToRadians)(s[1]),d=Math.pow(Math.sin(u/2),2)+Math.pow(Math.sin(c/2),2)*Math.cos(h)*Math.cos(f);return Object(o.radiansToLength)(2*Math.atan2(Math.sqrt(d),Math.sqrt(1-d)),i)}},"./MapStore2/node_modules/@turf/great-circle/main.es.js":function(e,t,r){"use strict";var n=r("./MapStore2/node_modules/@turf/invariant/main.es.js"),o=Math.PI/180,i=180/Math.PI,a=function(e,t){this.lon=e,this.lat=t,this.x=o*e,this.y=o*t};a.prototype.view=function(){return String(this.lon).slice(0,4)+","+String(this.lat).slice(0,4)},a.prototype.antipode=function(){var e=-1*this.lat,t=this.lon<0?180+this.lon:-1*(180-this.lon);return new a(t,e)};var s=function(){this.coords=[],this.length=0};s.prototype.move_to=function(e){this.length++,this.coords.push(e)};var u=function(e){this.properties=e||{},this.geometries=[]};u.prototype.json=function(){if(this.geometries.length<=0)return{geometry:{type:"LineString",coordinates:null},type:"Feature",properties:this.properties};if(1===this.geometries.length)return{geometry:{type:"LineString",coordinates:this.geometries[0].coords},type:"Feature",properties:this.properties};for(var e=[],t=0;t<this.geometries.length;t++)e.push(this.geometries[t].coords);return{geometry:{type:"MultiLineString",coordinates:e},type:"Feature",properties:this.properties}},u.prototype.wkt=function(){for(var e="",t="LINESTRING(",r=function(e){t+=e[0]+" "+e[1]+","},n=0;n<this.geometries.length;n++){if(0===this.geometries[n].coords.length)return"LINESTRING(empty)";this.geometries[n].coords.forEach(r),e+=t.substring(0,t.length-1)+")"}return e};var c=function(e,t,r){if(!e||void 0===e.x||void 0===e.y)throw new Error("GreatCircle constructor expects two args: start and end objects with x and y properties");if(!t||void 0===t.x||void 0===t.y)throw new Error("GreatCircle constructor expects two args: start and end objects with x and y properties");this.start=new a(e.x,e.y),this.end=new a(t.x,t.y),this.properties=r||{};var n=this.start.x-this.end.x,o=this.start.y-this.end.y,i=Math.pow(Math.sin(o/2),2)+Math.cos(this.start.y)*Math.cos(this.end.y)*Math.pow(Math.sin(n/2),2);if(this.g=2*Math.asin(Math.sqrt(i)),this.g===Math.PI)throw new Error("it appears "+e.view()+" and "+t.view()+" are 'antipodal', e.g diametrically opposite, thus there is no single route but rather infinite");if(isNaN(this.g))throw new Error("could not calculate great circle between "+e+" and "+t)};c.prototype.interpolate=function(e){var t=Math.sin((1-e)*this.g)/Math.sin(this.g),r=Math.sin(e*this.g)/Math.sin(this.g),n=t*Math.cos(this.start.y)*Math.cos(this.start.x)+r*Math.cos(this.end.y)*Math.cos(this.end.x),o=t*Math.cos(this.start.y)*Math.sin(this.start.x)+r*Math.cos(this.end.y)*Math.sin(this.end.x),a=t*Math.sin(this.start.y)+r*Math.sin(this.end.y),s=i*Math.atan2(a,Math.sqrt(Math.pow(n,2)+Math.pow(o,2)));return[i*Math.atan2(o,n),s]},c.prototype.Arc=function(e,t){var r=[];if(!e||e<=2)r.push([this.start.lon,this.start.lat]),r.push([this.end.lon,this.end.lat]);else for(var n=1/(e-1),o=0;o<e;++o){var i=n*o,a=this.interpolate(i);r.push(a)}for(var c=!1,h=0,f=t&&t.offset?t.offset:10,d=180-f,l=-180+f,p=360-f,m=1;m<r.length;++m){var g=r[m-1][0],y=r[m][0],b=Math.abs(y-g);b>p&&(y>d&&g<l||g>d&&y<l)?c=!0:b>h&&(h=b)}var w=[];if(c&&h<f){var v=[];w.push(v);for(var M=0;M<r.length;++M){var j=parseFloat(r[M][0]);if(M>0&&Math.abs(j-r[M-1][0])>p){var x=parseFloat(r[M-1][0]),E=parseFloat(r[M-1][1]),O=parseFloat(r[M][0]),S=parseFloat(r[M][1]);if(x>-180&&x<l&&180===O&&M+1<r.length&&r[M-1][0]>-180&&r[M-1][0]<l){v.push([-180,r[M][1]]),M++,v.push([r[M][0],r[M][1]]);continue}if(x>d&&x<180&&-180===O&&M+1<r.length&&r[M-1][0]>d&&r[M-1][0]<180){v.push([180,r[M][1]]),M++,v.push([r[M][0],r[M][1]]);continue}if(x<l&&O>d){var _=x;x=O,O=_;var P=E;E=S,S=P}if(x>d&&O<l&&(O+=360),x<=180&&O>=180&&x<O){var C=(180-x)/(O-x),q=C*S+(1-C)*E;v.push([r[M-1][0]>d?180:-180,q]),(v=[]).push([r[M-1][0]>d?-180:180,q]),w.push(v)}else v=[],w.push(v);v.push([j,r[M][1]])}else v.push([r[M][0],r[M][1]])}}else{var B=[];w.push(B);for(var A=0;A<r.length;++A)B.push([r[A][0],r[A][1]])}for(var T=new u(this.properties),F=0;F<w.length;++F){var R=new s;T.geometries.push(R);for(var L=w[F],N=0;N<L.length;++N)R.move_to(L[N])}return T},t.a=function(e,t,r){if("object"!=typeof(r=r||{}))throw new Error("options is invalid");var o=r.properties,i=r.npoints,a=r.offset;return e=Object(n.getCoord)(e),t=Object(n.getCoord)(t),o=o||{},i=i||100,a=a||10,new c({x:e[0],y:e[1]},{x:t[0],y:t[1]},o).Arc(i,{offset:a}).json()}},"./MapStore2/node_modules/@turf/helpers/main.es.js":function(e,t,r){"use strict";r.r(t),r.d(t,"earthRadius",(function(){return n})),r.d(t,"factors",(function(){return o})),r.d(t,"unitsFactors",(function(){return i})),r.d(t,"areaFactors",(function(){return a})),r.d(t,"feature",(function(){return s})),r.d(t,"geometry",(function(){return u})),r.d(t,"point",(function(){return c})),r.d(t,"points",(function(){return h})),r.d(t,"polygon",(function(){return f})),r.d(t,"polygons",(function(){return d})),r.d(t,"lineString",(function(){return l})),r.d(t,"lineStrings",(function(){return p})),r.d(t,"featureCollection",(function(){return m})),r.d(t,"multiLineString",(function(){return g})),r.d(t,"multiPoint",(function(){return y})),r.d(t,"multiPolygon",(function(){return b})),r.d(t,"geometryCollection",(function(){return w})),r.d(t,"round",(function(){return v})),r.d(t,"radiansToLength",(function(){return M})),r.d(t,"lengthToRadians",(function(){return j})),r.d(t,"lengthToDegrees",(function(){return x})),r.d(t,"bearingToAzimuth",(function(){return E})),r.d(t,"radiansToDegrees",(function(){return O})),r.d(t,"degreesToRadians",(function(){return S})),r.d(t,"convertLength",(function(){return _})),r.d(t,"convertArea",(function(){return P})),r.d(t,"isNumber",(function(){return C})),r.d(t,"isObject",(function(){return q})),r.d(t,"validateBBox",(function(){return B})),r.d(t,"validateId",(function(){return A})),r.d(t,"radians2degrees",(function(){return T})),r.d(t,"degrees2radians",(function(){return F})),r.d(t,"distanceToDegrees",(function(){return R})),r.d(t,"distanceToRadians",(function(){return L})),r.d(t,"radiansToDistance",(function(){return N})),r.d(t,"bearingToAngle",(function(){return k})),r.d(t,"convertDistance",(function(){return X}));var n=6371008.8,o={meters:n,metres:n,millimeters:1e3*n,millimetres:1e3*n,centimeters:100*n,centimetres:100*n,kilometers:n/1e3,kilometres:n/1e3,miles:n/1609.344,nauticalmiles:n/1852,inches:39.37*n,yards:n/1.0936,feet:3.28084*n,radians:1,degrees:n/111325},i={meters:1,metres:1,millimeters:1e3,millimetres:1e3,centimeters:100,centimetres:100,kilometers:.001,kilometres:.001,miles:1/1609.344,nauticalmiles:1/1852,inches:39.37,yards:1/1.0936,feet:3.28084,radians:1/n,degrees:1/111325},a={meters:1,metres:1,millimeters:1e6,millimetres:1e6,centimeters:1e4,centimetres:1e4,kilometers:1e-6,kilometres:1e-6,acres:247105e-9,miles:386e-9,yards:1.195990046,feet:10.763910417,inches:1550.003100006};function s(e,t,r){if(!q(r=r||{}))throw new Error("options is invalid");var n=r.bbox,o=r.id;if(void 0===e)throw new Error("geometry is required");if(t&&t.constructor!==Object)throw new Error("properties must be an Object");n&&B(n),o&&A(o);var i={type:"Feature"};return o&&(i.id=o),n&&(i.bbox=n),i.properties=t||{},i.geometry=e,i}function u(e,t,r){if(!q(r=r||{}))throw new Error("options is invalid");var n,o=r.bbox;if(!e)throw new Error("type is required");if(!t)throw new Error("coordinates is required");if(!Array.isArray(t))throw new Error("coordinates must be an Array");switch(o&&B(o),e){case"Point":n=c(t).geometry;break;case"LineString":n=l(t).geometry;break;case"Polygon":n=f(t).geometry;break;case"MultiPoint":n=y(t).geometry;break;case"MultiLineString":n=g(t).geometry;break;case"MultiPolygon":n=b(t).geometry;break;default:throw new Error(e+" is invalid")}return o&&(n.bbox=o),n}function c(e,t,r){if(!e)throw new Error("coordinates is required");if(!Array.isArray(e))throw new Error("coordinates must be an Array");if(e.length<2)throw new Error("coordinates must be at least 2 numbers long");if(!C(e[0])||!C(e[1]))throw new Error("coordinates must contain numbers");return s({type:"Point",coordinates:e},t,r)}function h(e,t,r){if(!e)throw new Error("coordinates is required");if(!Array.isArray(e))throw new Error("coordinates must be an Array");return m(e.map((function(e){return c(e,t)})),r)}function f(e,t,r){if(!e)throw new Error("coordinates is required");for(var n=0;n<e.length;n++){var o=e[n];if(o.length<4)throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");for(var i=0;i<o[o.length-1].length;i++){if(0===n&&0===i&&!C(o[0][0])||!C(o[0][1]))throw new Error("coordinates must contain numbers");if(o[o.length-1][i]!==o[0][i])throw new Error("First and last Position are not equivalent.")}}return s({type:"Polygon",coordinates:e},t,r)}function d(e,t,r){if(!e)throw new Error("coordinates is required");if(!Array.isArray(e))throw new Error("coordinates must be an Array");return m(e.map((function(e){return f(e,t)})),r)}function l(e,t,r){if(!e)throw new Error("coordinates is required");if(e.length<2)throw new Error("coordinates must be an array of two or more positions");if(!C(e[0][1])||!C(e[0][1]))throw new Error("coordinates must contain numbers");return s({type:"LineString",coordinates:e},t,r)}function p(e,t,r){if(!e)throw new Error("coordinates is required");if(!Array.isArray(e))throw new Error("coordinates must be an Array");return m(e.map((function(e){return l(e,t)})),r)}function m(e,t){if(!q(t=t||{}))throw new Error("options is invalid");var r=t.bbox,n=t.id;if(!e)throw new Error("No features passed");if(!Array.isArray(e))throw new Error("features must be an Array");r&&B(r),n&&A(n);var o={type:"FeatureCollection"};return n&&(o.id=n),r&&(o.bbox=r),o.features=e,o}function g(e,t,r){if(!e)throw new Error("coordinates is required");return s({type:"MultiLineString",coordinates:e},t,r)}function y(e,t,r){if(!e)throw new Error("coordinates is required");return s({type:"MultiPoint",coordinates:e},t,r)}function b(e,t,r){if(!e)throw new Error("coordinates is required");return s({type:"MultiPolygon",coordinates:e},t,r)}function w(e,t,r){if(!e)throw new Error("geometries is required");if(!Array.isArray(e))throw new Error("geometries must be an Array");return s({type:"GeometryCollection",geometries:e},t,r)}function v(e,t){if(null==e||isNaN(e))throw new Error("num is required");if(t&&!(t>=0))throw new Error("precision must be a positive number");var r=Math.pow(10,t||0);return Math.round(e*r)/r}function M(e,t){if(null==e)throw new Error("radians is required");if(t&&"string"!=typeof t)throw new Error("units must be a string");var r=o[t||"kilometers"];if(!r)throw new Error(t+" units is invalid");return e*r}function j(e,t){if(null==e)throw new Error("distance is required");if(t&&"string"!=typeof t)throw new Error("units must be a string");var r=o[t||"kilometers"];if(!r)throw new Error(t+" units is invalid");return e/r}function x(e,t){return O(j(e,t))}function E(e){if(null==e)throw new Error("bearing is required");var t=e%360;return t<0&&(t+=360),t}function O(e){if(null==e)throw new Error("radians is required");return 180*(e%(2*Math.PI))/Math.PI}function S(e){if(null==e)throw new Error("degrees is required");return e%360*Math.PI/180}function _(e,t,r){if(null==e)throw new Error("length is required");if(!(e>=0))throw new Error("length must be a positive number");return M(j(e,t),r||"kilometers")}function P(e,t,r){if(null==e)throw new Error("area is required");if(!(e>=0))throw new Error("area must be a positive number");var n=a[t||"meters"];if(!n)throw new Error("invalid original units");var o=a[r||"kilometers"];if(!o)throw new Error("invalid final units");return e/n*o}function C(e){return!isNaN(e)&&null!==e&&!Array.isArray(e)}function q(e){return!!e&&e.constructor===Object}function B(e){if(!e)throw new Error("bbox is required");if(!Array.isArray(e))throw new Error("bbox must be an Array");if(4!==e.length&&6!==e.length)throw new Error("bbox must be an Array of 4 or 6 numbers");e.forEach((function(e){if(!C(e))throw new Error("bbox must only contain numbers")}))}function A(e){if(!e)throw new Error("id is required");if(-1===["string","number"].indexOf(typeof e))throw new Error("id must be a number or a string")}function T(){throw new Error("method has been renamed to `radiansToDegrees`")}function F(){throw new Error("method has been renamed to `degreesToRadians`")}function R(){throw new Error("method has been renamed to `lengthToDegrees`")}function L(){throw new Error("method has been renamed to `lengthToRadians`")}function N(){throw new Error("method has been renamed to `radiansToLength`")}function k(){throw new Error("method has been renamed to `bearingToAzimuth`")}function X(){throw new Error("method has been renamed to `convertLength`")}},"./MapStore2/node_modules/@turf/invariant/main.es.js":function(e,t,r){"use strict";r.r(t),r.d(t,"getCoord",(function(){return o})),r.d(t,"getCoords",(function(){return i})),r.d(t,"containsNumber",(function(){return a})),r.d(t,"geojsonType",(function(){return s})),r.d(t,"featureOf",(function(){return u})),r.d(t,"collectionOf",(function(){return c})),r.d(t,"getGeom",(function(){return h})),r.d(t,"getGeomType",(function(){return f})),r.d(t,"getType",(function(){return d}));var n=r("./MapStore2/node_modules/@turf/helpers/main.es.js");function o(e){if(!e)throw new Error("obj is required");var t=i(e);if(t.length>1&&Object(n.isNumber)(t[0])&&Object(n.isNumber)(t[1]))return t;throw new Error("Coordinate is not a valid Point")}function i(e){if(!e)throw new Error("obj is required");var t;if(e.length?t=e:e.coordinates?t=e.coordinates:e.geometry&&e.geometry.coordinates&&(t=e.geometry.coordinates),t)return a(t),t;throw new Error("No valid coordinates")}function a(e){if(e.length>1&&Object(n.isNumber)(e[0])&&Object(n.isNumber)(e[1]))return!0;if(Array.isArray(e[0])&&e[0].length)return a(e[0]);throw new Error("coordinates must only contain numbers")}function s(e,t,r){if(!t||!r)throw new Error("type and name required");if(!e||e.type!==t)throw new Error("Invalid input to "+r+": must be a "+t+", given "+e.type)}function u(e,t,r){if(!e)throw new Error("No feature passed");if(!r)throw new Error(".featureOf() requires a name");if(!e||"Feature"!==e.type||!e.geometry)throw new Error("Invalid input to "+r+", Feature with geometry required");if(!e.geometry||e.geometry.type!==t)throw new Error("Invalid input to "+r+": must be a "+t+", given "+e.geometry.type)}function c(e,t,r){if(!e)throw new Error("No featureCollection passed");if(!r)throw new Error(".collectionOf() requires a name");if(!e||"FeatureCollection"!==e.type)throw new Error("Invalid input to "+r+", FeatureCollection required");for(var n=0;n<e.features.length;n++){var o=e.features[n];if(!o||"Feature"!==o.type||!o.geometry)throw new Error("Invalid input to "+r+", Feature with geometry required");if(!o.geometry||o.geometry.type!==t)throw new Error("Invalid input to "+r+": must be a "+t+", given "+o.geometry.type)}}function h(e){if(!e)throw new Error("geojson is required");if(void 0!==e.geometry)return e.geometry;if(e.coordinates||e.geometries)return e;throw new Error("geojson must be a valid Feature or Geometry Object")}function f(){throw new Error("invariant.getGeomType has been deprecated in v5.0 in favor of invariant.getType")}function d(e,t){if(!e)throw new Error((t||"geojson")+" is required");if(e.geometry&&e.geometry.type)return e.geometry.type;if(e.type)return e.type;throw new Error((t||"geojson")+" is invalid")}},"./MapStore2/node_modules/@turf/line-intersect/index.js":function(e,t,r){var n=r("./MapStore2/node_modules/@turf/helpers/main.es.js"),o=r("./MapStore2/node_modules/@turf/meta/main.es.js"),i=r("./MapStore2/node_modules/@turf/line-segment/main.es.js"),a=r("./MapStore2/node_modules/@turf/invariant/main.es.js").getCoords,s=r("./MapStore2/node_modules/geojson-rbush/index.js"),u=n.point,c=n.featureCollection,h=o.featureEach;function f(e,t){var r=a(e),n=a(t);if(2!==r.length)throw new Error("<intersects> line1 must only contain 2 coordinates");if(2!==n.length)throw new Error("<intersects> line2 must only contain 2 coordinates");var o=r[0][0],i=r[0][1],s=r[1][0],c=r[1][1],h=n[0][0],f=n[0][1],d=n[1][0],l=n[1][1],p=(l-f)*(s-o)-(d-h)*(c-i),m=(d-h)*(i-f)-(l-f)*(o-h),g=(s-o)*(i-f)-(c-i)*(o-h);if(0===p)return null;var y=m/p,b=g/p;return y>=0&&y<=1&&b>=0&&b<=1?u([o+y*(s-o),i+y*(c-i)]):null}e.exports=function(e,t){var r=[];if("LineString"===e.geometry.type&&"LineString"===t.geometry.type&&2===e.geometry.coordinates.length&&2===t.geometry.coordinates.length){var n=f(e,t);return n&&r.push(n),c(r)}var o=s();return o.load(i(t)),h(i(e),(function(e){h(o.search(e),(function(t){var n=f(e,t);n&&r.push(n)}))})),c(r)}},"./MapStore2/node_modules/@turf/line-segment/main.es.js":function(e,t,r){"use strict";r.r(t);var n=r("./MapStore2/node_modules/@turf/helpers/main.es.js"),o=r("./MapStore2/node_modules/@turf/invariant/main.es.js"),i=r("./MapStore2/node_modules/@turf/meta/main.es.js");t.default=function(e){if(!e)throw new Error("geojson is required");var t=[];return Object(i.flattenEach)(e,(function(e){!function(e,t){var r=[],i=e.geometry;switch(i.type){case"Polygon":r=Object(o.getCoords)(i);break;case"LineString":r=[Object(o.getCoords)(i)]}r.forEach((function(r){(function(e,t){var r=[];return e.reduce((function(e,o){var i,a,s,u,c,h,f=Object(n.lineString)([e,o],t);return f.bbox=(a=o,s=(i=e)[0],u=i[1],c=a[0],h=a[1],[s<c?s:c,u<h?u:h,s>c?s:c,u>h?u:h]),r.push(f),o})),r})(r,e.properties).forEach((function(e){e.id=t.length,t.push(e)}))}))}(e,t)})),Object(n.featureCollection)(t)}},"./MapStore2/node_modules/@turf/meta/main.es.js":function(e,t,r){"use strict";r.r(t),r.d(t,"coordEach",(function(){return o})),r.d(t,"coordReduce",(function(){return i})),r.d(t,"propEach",(function(){return a})),r.d(t,"propReduce",(function(){return s})),r.d(t,"featureEach",(function(){return u})),r.d(t,"featureReduce",(function(){return c})),r.d(t,"coordAll",(function(){return h})),r.d(t,"geomEach",(function(){return f})),r.d(t,"geomReduce",(function(){return d})),r.d(t,"flattenEach",(function(){return l})),r.d(t,"flattenReduce",(function(){return p})),r.d(t,"segmentEach",(function(){return m})),r.d(t,"segmentReduce",(function(){return g})),r.d(t,"lineEach",(function(){return y})),r.d(t,"lineReduce",(function(){return b}));var n=r("./MapStore2/node_modules/@turf/helpers/main.es.js");function o(e,t,r){if(null!==e)for(var n,i,a,s,u,c,h,f,d=0,l=0,p=e.type,m="FeatureCollection"===p,g="Feature"===p,y=m?e.features.length:1,b=0;b<y;b++){u=(f=!!(h=m?e.features[b].geometry:g?e.geometry:e)&&"GeometryCollection"===h.type)?h.geometries.length:1;for(var w=0;w<u;w++){var v=0,M=0;if(null!==(s=f?h.geometries[w]:h)){c=s.coordinates;var j=s.type;switch(d=!r||"Polygon"!==j&&"MultiPolygon"!==j?0:1,j){case null:break;case"Point":t(c,l,b,v,M),l++,v++;break;case"LineString":case"MultiPoint":for(n=0;n<c.length;n++)t(c[n],l,b,v,M),l++,"MultiPoint"===j&&v++;"LineString"===j&&v++;break;case"Polygon":case"MultiLineString":for(n=0;n<c.length;n++){for(i=0;i<c[n].length-d;i++)t(c[n][i],l,b,v,M),l++;"MultiLineString"===j&&v++,"Polygon"===j&&M++}"Polygon"===j&&v++;break;case"MultiPolygon":for(n=0;n<c.length;n++){for("MultiPolygon"===j&&(M=0),i=0;i<c[n].length;i++){for(a=0;a<c[n][i].length-d;a++)t(c[n][i][a],l,b,v,M),l++;M++}v++}break;case"GeometryCollection":for(n=0;n<s.geometries.length;n++)o(s.geometries[n],t,r);break;default:throw new Error("Unknown Geometry Type")}}}}}function i(e,t,r,n){var i=r;return o(e,(function(e,n,o,a,s){i=0===n&&void 0===r?e:t(i,e,n,o,a,s)}),n),i}function a(e,t){var r;switch(e.type){case"FeatureCollection":for(r=0;r<e.features.length;r++)t(e.features[r].properties,r);break;case"Feature":t(e.properties,0)}}function s(e,t,r){var n=r;return a(e,(function(e,o){n=0===o&&void 0===r?e:t(n,e,o)})),n}function u(e,t){if("Feature"===e.type)t(e,0);else if("FeatureCollection"===e.type)for(var r=0;r<e.features.length;r++)t(e.features[r],r)}function c(e,t,r){var n=r;return u(e,(function(e,o){n=0===o&&void 0===r?e:t(n,e,o)})),n}function h(e){var t=[];return o(e,(function(e){t.push(e)})),t}function f(e,t){var r,n,o,i,a,s,u,c,h,f,d=0,l="FeatureCollection"===e.type,p="Feature"===e.type,m=l?e.features.length:1;for(r=0;r<m;r++){for(s=l?e.features[r].geometry:p?e.geometry:e,c=l?e.features[r].properties:p?e.properties:{},h=l?e.features[r].bbox:p?e.bbox:void 0,f=l?e.features[r].id:p?e.id:void 0,a=(u=!!s&&"GeometryCollection"===s.type)?s.geometries.length:1,o=0;o<a;o++)if(null!==(i=u?s.geometries[o]:s))switch(i.type){case"Point":case"LineString":case"MultiPoint":case"Polygon":case"MultiLineString":case"MultiPolygon":t(i,d,c,h,f);break;case"GeometryCollection":for(n=0;n<i.geometries.length;n++)t(i.geometries[n],d,c,h,f);break;default:throw new Error("Unknown Geometry Type")}else t(null,d,c,h,f);d++}}function d(e,t,r){var n=r;return f(e,(function(e,o,i,a,s){n=0===o&&void 0===r?e:t(n,e,o,i,a,s)})),n}function l(e,t){f(e,(function(e,r,o,i,a){var s,u=null===e?null:e.type;switch(u){case null:case"Point":case"LineString":case"Polygon":return void t(Object(n.feature)(e,o,{bbox:i,id:a}),r,0)}switch(u){case"MultiPoint":s="Point";break;case"MultiLineString":s="LineString";break;case"MultiPolygon":s="Polygon"}e.coordinates.forEach((function(e,i){var a={type:s,coordinates:e};t(Object(n.feature)(a,o),r,i)}))}))}function p(e,t,r){var n=r;return l(e,(function(e,o,i){n=0===o&&0===i&&void 0===r?e:t(n,e,o,i)})),n}function m(e,t){l(e,(function(e,r,o){var a=0;if(e.geometry){var s=e.geometry.type;"Point"!==s&&"MultiPoint"!==s&&i(e,(function(i,s,u,c,h,f){var d=Object(n.lineString)([i,s],e.properties);return t(d,r,o,f,a),a++,s}))}}))}function g(e,t,r){var n=r,o=!1;return m(e,(function(e,i,a,s,u){n=!1===o&&void 0===r?e:t(n,e,i,a,s,u),o=!0})),n}function y(e,t){if(!e)throw new Error("geojson is required");l(e,(function(e,r,o){if(null!==e.geometry){var i=e.geometry.type,a=e.geometry.coordinates;switch(i){case"LineString":t(e,r,o,0,0);break;case"Polygon":for(var s=0;s<a.length;s++)t(Object(n.lineString)(a[s],e.properties),r,o,s)}}}))}function b(e,t,r){var n=r;return y(e,(function(e,o,i,a){n=0===o&&void 0===r?e:t(n,e,o,i,a)})),n}},"./MapStore2/node_modules/@turf/polygon-to-linestring/index.js":function(e,t,r){var n=r("./MapStore2/node_modules/@turf/invariant/main.es.js").getCoords,o=r("./MapStore2/node_modules/@turf/helpers/main.es.js"),i=o.lineString,a=o.multiLineString,s=o.featureCollection;function u(e,t){return e.length>1?a(e,t):i(e[0],t)}e.exports=function(e){var t,r=(t=e).geometry?t.geometry.type:t.type,o=n(e),i=e.properties;if(!o.length)throw new Error("polygon must contain coordinates");switch(r){case"Polygon":return s([u(o,i)]);case"MultiPolygon":var a=[];return o.forEach((function(e){a.push(u(e,i))})),s(a);default:throw new Error("geom "+r+" not supported")}}},"./MapStore2/node_modules/geojson-equality/index.js":function(e,t,r){var n=r("./MapStore2/node_modules/deep-equal/index.js"),o=function(e){this.precision=e&&e.precision?e.precision:17,this.direction=!(!e||!e.direction)&&e.direction,this.pseudoNode=!(!e||!e.pseudoNode)&&e.pseudoNode,this.objectComparator=e&&e.objectComparator?e.objectComparator:s};function i(e){return e.coordinates.map((function(t){return{type:e.type.replace("Multi",""),coordinates:t}}))}function a(e,t){return e.hasOwnProperty("coordinates")?e.coordinates.length===t.coordinates.length:e.length===t.length}function s(e,t){return n(e,t,{strict:!0})}o.prototype.compare=function(e,t){if(e.type!==t.type||!a(e,t))return!1;switch(e.type){case"Point":return this.compareCoord(e.coordinates,t.coordinates);case"LineString":return this.compareLine(e.coordinates,t.coordinates,0,!1);case"Polygon":return this.comparePolygon(e,t);case"Feature":return this.compareFeature(e,t);default:if(0===e.type.indexOf("Multi")){var r=this,n=i(e),o=i(t);return n.every((function(e){return this.some((function(t){return r.compare(e,t)}))}),o)}}return!1},o.prototype.compareCoord=function(e,t){if(e.length!==t.length)return!1;for(var r=0;r<e.length;r++)if(e[r].toFixed(this.precision)!==t[r].toFixed(this.precision))return!1;return!0},o.prototype.compareLine=function(e,t,r,n){if(!a(e,t))return!1;var o=this.pseudoNode?e:this.removePseudo(e),i=this.pseudoNode?t:this.removePseudo(t);if(!n||this.compareCoord(o[0],i[0])||(i=this.fixStartIndex(i,o))){var s=this.compareCoord(o[r],i[r]);return this.direction||s?this.comparePath(o,i):!!this.compareCoord(o[r],i[i.length-(1+r)])&&this.comparePath(o.slice().reverse(),i)}},o.prototype.fixStartIndex=function(e,t){for(var r,n=-1,o=0;o<e.length;o++)if(this.compareCoord(e[o],t[0])){n=o;break}return n>=0&&(r=[].concat(e.slice(n,e.length),e.slice(1,n+1))),r},o.prototype.comparePath=function(e,t){var r=this;return e.every((function(e,t){return r.compareCoord(e,this[t])}),t)},o.prototype.comparePolygon=function(e,t){if(this.compareLine(e.coordinates[0],t.coordinates[0],1,!0)){var r=e.coordinates.slice(1,e.coordinates.length),n=t.coordinates.slice(1,t.coordinates.length),o=this;return r.every((function(e){return this.some((function(t){return o.compareLine(e,t,1,!0)}))}),n)}return!1},o.prototype.compareFeature=function(e,t){return!(e.id!==t.id||!this.objectComparator(e.properties,t.properties)||!this.compareBBox(e,t))&&this.compare(e.geometry,t.geometry)},o.prototype.compareBBox=function(e,t){return!!(!e.bbox&&!t.bbox||e.bbox&&t.bbox&&this.compareCoord(e.bbox,t.bbox))},o.prototype.removePseudo=function(e){return e},e.exports=o},"./MapStore2/node_modules/geojson-rbush/index.js":function(e,t,r){"use strict";function n(e,t,r){var n=e[t];e[t]=e[r],e[r]=n}function o(e,t){return e<t?-1:e>t?1:0}r.r(t);var i=function(e,t,r,i,a){!function e(t,r,o,i,a){for(;i>o;){if(i-o>600){var s=i-o+1,u=r-o+1,c=Math.log(s),h=.5*Math.exp(2*c/3),f=.5*Math.sqrt(c*h*(s-h)/s)*(u-s/2<0?-1:1),d=Math.max(o,Math.floor(r-u*h/s+f)),l=Math.min(i,Math.floor(r+(s-u)*h/s+f));e(t,r,d,l,a)}var p=t[r],m=o,g=i;for(n(t,o,r),a(t[i],p)>0&&n(t,o,i);m<g;){for(n(t,m,g),m++,g--;a(t[m],p)<0;)m++;for(;a(t[g],p)>0;)g--}0===a(t[o],p)?n(t,o,g):(g++,n(t,g,i)),g<=r&&(o=g+1),r<=g&&(i=g-1)}}(e,t,r||0,i||e.length-1,a||o)};function a(e,t){if(!(this instanceof a))return new a(e,t);this._maxEntries=Math.max(4,e||9),this._minEntries=Math.max(2,Math.ceil(.4*this._maxEntries)),t&&this._initFormat(t),this.clear()}function s(e,t,r){if(!r)return t.indexOf(e);for(var n=0;n<t.length;n++)if(r(e,t[n]))return n;return-1}function u(e,t){c(e,0,e.children.length,t,e)}function c(e,t,r,n,o){o||(o=y(null)),o.minX=1/0,o.minY=1/0,o.maxX=-1/0,o.maxY=-1/0;for(var i,a=t;a<r;a++)i=e.children[a],h(o,e.leaf?n(i):i);return o}function h(e,t){return e.minX=Math.min(e.minX,t.minX),e.minY=Math.min(e.minY,t.minY),e.maxX=Math.max(e.maxX,t.maxX),e.maxY=Math.max(e.maxY,t.maxY),e}function f(e,t){return e.minX-t.minX}function d(e,t){return e.minY-t.minY}function l(e){return(e.maxX-e.minX)*(e.maxY-e.minY)}function p(e){return e.maxX-e.minX+(e.maxY-e.minY)}function m(e,t){return e.minX<=t.minX&&e.minY<=t.minY&&t.maxX<=e.maxX&&t.maxY<=e.maxY}function g(e,t){return t.minX<=e.maxX&&t.minY<=e.maxY&&t.maxX>=e.minX&&t.maxY>=e.minY}function y(e){return{children:e,height:1,leaf:!0,minX:1/0,minY:1/0,maxX:-1/0,maxY:-1/0}}function b(e,t,r,n,o){for(var a,s=[t,r];s.length;)(r=s.pop())-(t=s.pop())<=n||(a=t+Math.ceil((r-t)/n/2)*n,i(e,a,t,r,o),s.push(t,a,a,r))}a.prototype={all:function(){return this._all(this.data,[])},search:function(e){var t=this.data,r=[],n=this.toBBox;if(!g(e,t))return r;for(var o,i,a,s,u=[];t;){for(o=0,i=t.children.length;o<i;o++)a=t.children[o],g(e,s=t.leaf?n(a):a)&&(t.leaf?r.push(a):m(e,s)?this._all(a,r):u.push(a));t=u.pop()}return r},collides:function(e){var t=this.data,r=this.toBBox;if(!g(e,t))return!1;for(var n,o,i,a,s=[];t;){for(n=0,o=t.children.length;n<o;n++)if(i=t.children[n],g(e,a=t.leaf?r(i):i)){if(t.leaf||m(e,a))return!0;s.push(i)}t=s.pop()}return!1},load:function(e){if(!e||!e.length)return this;if(e.length<this._minEntries){for(var t=0,r=e.length;t<r;t++)this.insert(e[t]);return this}var n=this._build(e.slice(),0,e.length-1,0);if(this.data.children.length)if(this.data.height===n.height)this._splitRoot(this.data,n);else{if(this.data.height<n.height){var o=this.data;this.data=n,n=o}this._insert(n,this.data.height-n.height-1,!0)}else this.data=n;return this},insert:function(e){return e&&this._insert(e,this.data.height-1),this},clear:function(){return this.data=y([]),this},remove:function(e,t){if(!e)return this;for(var r,n,o,i,a=this.data,u=this.toBBox(e),c=[],h=[];a||c.length;){if(a||(a=c.pop(),n=c[c.length-1],r=h.pop(),i=!0),a.leaf&&-1!==(o=s(e,a.children,t)))return a.children.splice(o,1),c.push(a),this._condense(c),this;i||a.leaf||!m(a,u)?n?(r++,a=n.children[r],i=!1):a=null:(c.push(a),h.push(r),r=0,n=a,a=a.children[0])}return this},toBBox:function(e){return e},compareMinX:f,compareMinY:d,toJSON:function(){return this.data},fromJSON:function(e){return this.data=e,this},_all:function(e,t){for(var r=[];e;)e.leaf?t.push.apply(t,e.children):r.push.apply(r,e.children),e=r.pop();return t},_build:function(e,t,r,n){var o,i=r-t+1,a=this._maxEntries;if(i<=a)return u(o=y(e.slice(t,r+1)),this.toBBox),o;n||(n=Math.ceil(Math.log(i)/Math.log(a)),a=Math.ceil(i/Math.pow(a,n-1))),(o=y([])).leaf=!1,o.height=n;var s,c,h,f,d=Math.ceil(i/a),l=d*Math.ceil(Math.sqrt(a));for(b(e,t,r,l,this.compareMinX),s=t;s<=r;s+=l)for(b(e,s,h=Math.min(s+l-1,r),d,this.compareMinY),c=s;c<=h;c+=d)f=Math.min(c+d-1,h),o.children.push(this._build(e,c,f,n-1));return u(o,this.toBBox),o},_chooseSubtree:function(e,t,r,n){for(var o,i,a,s,u,c,h,f,d,p;n.push(t),!t.leaf&&n.length-1!==r;){for(h=f=1/0,o=0,i=t.children.length;o<i;o++)u=l(a=t.children[o]),d=e,p=a,(c=(Math.max(p.maxX,d.maxX)-Math.min(p.minX,d.minX))*(Math.max(p.maxY,d.maxY)-Math.min(p.minY,d.minY))-u)<f?(f=c,h=u<h?u:h,s=a):c===f&&u<h&&(h=u,s=a);t=s||t.children[0]}return t},_insert:function(e,t,r){var n=this.toBBox,o=r?e:n(e),i=[],a=this._chooseSubtree(o,this.data,t,i);for(a.children.push(e),h(a,o);t>=0&&i[t].children.length>this._maxEntries;)this._split(i,t),t--;this._adjustParentBBoxes(o,i,t)},_split:function(e,t){var r=e[t],n=r.children.length,o=this._minEntries;this._chooseSplitAxis(r,o,n);var i=this._chooseSplitIndex(r,o,n),a=y(r.children.splice(i,r.children.length-i));a.height=r.height,a.leaf=r.leaf,u(r,this.toBBox),u(a,this.toBBox),t?e[t-1].children.push(a):this._splitRoot(r,a)},_splitRoot:function(e,t){this.data=y([e,t]),this.data.height=e.height+1,this.data.leaf=!1,u(this.data,this.toBBox)},_chooseSplitIndex:function(e,t,r){var n,o,i,a,s,u,h,f,d,p,m,g,y,b;for(u=h=1/0,n=t;n<=r-t;n++)o=c(e,0,n,this.toBBox),i=c(e,n,r,this.toBBox),d=o,p=i,m=void 0,g=void 0,y=void 0,b=void 0,m=Math.max(d.minX,p.minX),g=Math.max(d.minY,p.minY),y=Math.min(d.maxX,p.maxX),b=Math.min(d.maxY,p.maxY),a=Math.max(0,y-m)*Math.max(0,b-g),s=l(o)+l(i),a<u?(u=a,f=n,h=s<h?s:h):a===u&&s<h&&(h=s,f=n);return f},_chooseSplitAxis:function(e,t,r){var n=e.leaf?this.compareMinX:f,o=e.leaf?this.compareMinY:d;this._allDistMargin(e,t,r,n)<this._allDistMargin(e,t,r,o)&&e.children.sort(n)},_allDistMargin:function(e,t,r,n){e.children.sort(n);var o,i,a=this.toBBox,s=c(e,0,t,a),u=c(e,r-t,r,a),f=p(s)+p(u);for(o=t;o<r-t;o++)i=e.children[o],h(s,e.leaf?a(i):i),f+=p(s);for(o=r-t-1;o>=t;o--)i=e.children[o],h(u,e.leaf?a(i):i),f+=p(u);return f},_adjustParentBBoxes:function(e,t,r){for(var n=r;n>=0;n--)h(t[n],e)},_condense:function(e){for(var t,r=e.length-1;r>=0;r--)0===e[r].children.length?r>0?(t=e[r-1].children).splice(t.indexOf(e[r]),1):this.clear():u(e[r],this.toBBox)},_initFormat:function(e){var t=["return a"," - b",";"];this.compareMinX=new Function("a","b",t.join(e[0])),this.compareMinY=new Function("a","b",t.join(e[1])),this.toBBox=new Function("a","return {minX: a"+e[0]+", minY: a"+e[1]+", maxX: a"+e[2]+", maxY: a"+e[3]+"};")}};var w=a,v=r("./MapStore2/node_modules/@turf/meta/main.es.js");function M(e){var t=[e[0],e[1]],r=[e[0],e[3]],n=[e[2],e[3]];return{type:"Feature",bbox:e,properties:{},geometry:{type:"Polygon",coordinates:[[t,[e[2],e[1]],n,r,t]]}}}function j(e){var t=[1/0,1/0,-1/0,-1/0];return Object(v.coordEach)(e,(function(e){t[0]>e[0]&&(t[0]=e[0]),t[1]>e[1]&&(t[1]=e[1]),t[2]<e[0]&&(t[2]=e[0]),t[3]<e[1]&&(t[3]=e[1])})),t}t.default=function(e){var t=w(e);return t.insert=function(e){if(Array.isArray(e)){var t=e;(e=M(t)).bbox=t}else e.bbox=e.bbox?e.bbox:j(e);return w.prototype.insert.call(this,e)},t.load=function(e){var t=[];return Array.isArray(e)?e.forEach((function(e){var r=M(e);r.bbox=e,t.push(r)})):Object(v.featureEach)(e,(function(e){e.bbox=e.bbox?e.bbox:j(e),t.push(e)})),w.prototype.load.call(this,t)},t.remove=function(e){if(Array.isArray(e)){var t=e;(e=M(t)).bbox=t}return w.prototype.remove.call(this,e)},t.clear=function(){return w.prototype.clear.call(this)},t.search=function(e){return{type:"FeatureCollection",features:w.prototype.search.call(this,this.toBBox(e))}},t.collides=function(e){return w.prototype.collides.call(this,this.toBBox(e))},t.all=function(){return{type:"FeatureCollection",features:w.prototype.all.call(this)}},t.toJSON=function(){return w.prototype.toJSON.call(this)},t.fromJSON=function(e){return w.prototype.fromJSON.call(this,e)},t.toBBox=function(e){var t;return{minX:(t=e.bbox?e.bbox:Array.isArray(e)&&4===e.length?e:j(e))[0],minY:t[1],maxX:t[2],maxY:t[3]}},t}},"./MapStore2/node_modules/node-geo-distance/index.js":function(e,t){Number.prototype.toRad=function(){return this*Math.PI/180},t.vincenty=function(e,t,r){var n,o=6378137,i=6356752.314245,a=1/298.257223563,s=e.latitude,u=e.longitude,c=t.latitude,h=(t.longitude-u).toRad(),f=Math.atan((1-a)*Math.tan(s.toRad())),d=Math.atan((1-a)*Math.tan(c.toRad())),l=Math.sin(f),p=Math.cos(f),m=Math.sin(d),g=Math.cos(d),y=h,b=100;do{var w=Math.sin(y),v=Math.cos(y),M=Math.sqrt(g*w*(g*w)+(p*m-l*g*v)*(p*m-l*g*v));0==M&&r(0);var j=l*m+p*g*v,x=Math.atan2(M,j),E=p*g*w/M,O=1-E*E,S=j-2*l*m/O;isNaN(S)&&(S=0);var _=a/16*O*(4+a*(4-3*O));n=y,y=h+(1-_)*a*E*(x+_*M*(S+_*j*(2*S*S-1)))}while(Math.abs(y-n)>1e-12&&--b>0);0==b&&r(NaN);var P=O*(o*o-i*i)/(i*i),C=P/1024*(256+P*(P*(74-47*P)-128)),q=i*(1+P/16384*(4096+P*(P*(320-175*P)-768)))*(x-C*M*(S+C/4*(j*(2*S*S-1)-C/6*S*(4*M*M-3)*(4*S*S-3))));r(q=q.toFixed(3))},t.vincentySync=function(e,t){var r,n=6378137,o=6356752.314245,i=1/298.257223563,a=e.latitude,s=e.longitude,u=t.latitude,c=(t.longitude-s).toRad(),h=Math.atan((1-i)*Math.tan(a.toRad())),f=Math.atan((1-i)*Math.tan(u.toRad())),d=Math.sin(h),l=Math.cos(h),p=Math.sin(f),m=Math.cos(f),g=c,y=100;do{var b=Math.sin(g),w=Math.cos(g),v=Math.sqrt(m*b*(m*b)+(l*p-d*m*w)*(l*p-d*m*w));if(0==v)return 0;var M=d*p+l*m*w,j=Math.atan2(v,M),x=l*m*b/v,E=1-x*x,O=M-2*d*p/E;isNaN(O)&&(O=0);var S=i/16*E*(4+i*(4-3*E));r=g,g=c+(1-S)*i*x*(j+S*v*(O+S*M*(2*O*O-1)))}while(Math.abs(g-r)>1e-12&&--y>0);if(0==y)return NaN;var _=E*(n*n-o*o)/(o*o),P=_/1024*(256+_*(_*(74-47*_)-128)),C=o*(1+_/16384*(4096+_*(_*(320-175*_)-768)))*(j-P*v*(O+P/4*(M*(2*O*O-1)-P/6*O*(4*v*v-3)*(4*O*O-3))));return C=C.toFixed(3)},t.haversine=function(e,t,r){var n=e.latitude,o=e.longitude,i=t.latitude,a=t.longitude,s=(i-n).toRad(),u=(a-o).toRad(),c=Math.sin(s/2)*Math.sin(s/2)+Math.cos(n.toRad())*Math.cos(i.toRad())*Math.sin(u/2)*Math.sin(u/2);return r((1e3*(6371*(2*Math.atan2(Math.sqrt(c),Math.sqrt(1-c))))).toFixed(3))},t.haversineSync=function(e,t){var r=e.latitude,n=e.longitude,o=t.latitude,i=t.longitude,a=(o-r).toRad(),s=(i-n).toRad(),u=Math.sin(a/2)*Math.sin(a/2)+Math.cos(r.toRad())*Math.cos(o.toRad())*Math.sin(s/2)*Math.sin(s/2);return(1e3*(6371*(2*Math.atan2(Math.sqrt(u),Math.sqrt(1-u))))).toFixed(3)}},"./MapStore2/node_modules/turf-point/index.js":function(e,t){var r=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)};e.exports=function(e,t){if(!r(e))throw new Error("Coordinates must be an array");if(e.length<2)throw new Error("Coordinates must be at least 2 numbers long");return{type:"Feature",geometry:{type:"Point",coordinates:e},properties:t||{}}}}}]);